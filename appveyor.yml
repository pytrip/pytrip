# validation page for appveyor config: https://ci.appveyor.com/tools/validate-yaml

# we are not building Visual Studio project, so default build step is off
build: off

# encrypting data done here: https://ci.appveyor.com/tools/encrypt
environment:
  PYPIPASS:
    secure: Bq/BLSOSlZhPmHsWR1ML1A==
  PYPIUSER: grzanka
  matrix:
#    - platform: x64
#      PYTHON: "C:\\Python27-x64"
#
    - platform: x64
      PYTHON: "C:\\Python34-x64"

    - platform: x64
      PYTHON: "C:\\Python35-x64"

    - platform: x64
      PYTHON: "C:\\Python36-x64"

    - platform: x64
      PYTHON: "C:\\Python37-x64"

    - platform: x64
      PYTHON: "C:\\Python38-x64"
init:
# check python version for default and target python version
  - "%PYTHON%\\python.exe -V"
  - python -V
# check 32 or 64 bit for default python
  - python -c "import struct;print(8 * struct.calcsize('P'))"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  # Prepend Python to the PATH of this build, Appveyor does not do anything special
  # to put the Python version you want to use on PATH.
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
# check python version (default and target) to ensure PATH setting was successful
  - "%PYTHON%\\python.exe -V"
  - python -V
# check pip version (default and target), as above
  - pip -V
  - python -m pip -V
  - "%PYTHON%\\python.exe -m pip -V"
# check 32 or 64 bit of target python
  - python -c "import struct;print(8 * struct.calcsize('P'))"
# install usual requirements
  - python -m pip install --upgrade virtualenv pip setuptools tox wheel
  - python -m pip install --upgrade -r tests/requirements-test.txt
  - python -m pip install --upgrade -r requirements.txt
# check numpy & scipy versions
  - python -c "import numpy as np;print(np.version.version)"
  - python -c "import scipy as sp;print(sp.version.version)"
# check python and pip versions
  - python -V
  - python -m pip -V

test_script:
# make wheel package
  - python -m pip install wheel
  - python setup.py bdist_wheel
# clean build directory
  - rd /s /q build
# remove source directory, to be sure that we use only wheel package for testing
  - rd /s /q pytrip
  - del setup.py
# install wheel package via pip, as we do not know the wheel filename in advance, we loop over all *.whl files in dist directory
  - ps: cd C:\ ; Get-ChildItem -Path C:\projects\pytrip\dist\ -Recurse -Include *.whl | foreach-object { echo $_ | Out-Host ; pip install $_}
# run tests (normal py.test command results in memory error on appveyor, so we run tests file-by-file)
# exit in case of failure of a single test
# exclude problematic tests on 32bit platform (see https://github.com/pytrip/pytrip/issues/320)
  - cd C:\\projects\\pytrip\
  - ps: $exclude_tests = If ($env:platform -eq "x86") {"test_converters.py"} Else {""} ; Get-ChildItem -Path tests\ -Recurse -Include test*.py -Exclude $exclude_tests | foreach-object { $(echo $_ | Out-Host ; python -m pytest $_ | Out-Host; $?) -or $(break)}
# deploy package
  - bash appveyor\deploy_package.sh

# upload artifacts, disabling to save the space
#artifacts:
#  - path: dist\*whl

# debugging RDP connection, uncomment to enable
# more details here: https://www.appveyor.com/docs/how-to/rdp-to-build-worker/
#on_finish:
#  - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
