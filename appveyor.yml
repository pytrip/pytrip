# validation page for appveyor config: https://ci.appveyor.com/tools/validate-yaml

# we are not building Visual Studio project, so default build step is off
build: off

# encrypting data done here: https://ci.appveyor.com/tools/encrypt
environment:
  PYPIPASS:
    secure: Bq/BLSOSlZhPmHsWR1ML1A==
  PYPIUSER: grzanka
  matrix:
# skipping 32bits as tests there result in Appveyor memory problems
#    - platform: x86
#      PYTHON: "C:\\Python27"

    - platform: x64
      PYTHON: "C:\\Python27-x64"

#    - platform: x86
#      PYTHON: "C:\\Python35"

    - platform: x64
      PYTHON: "C:\\Python35-x64"

#    - platform: x86
#      PYTHON: "C:\\Python36"

    - platform: x64
      PYTHON: "C:\\Python36-x64"
init:
# check python version
  - python -V
# check 32 or 64 bit
  - python -c "import struct;print(8 * struct.calcsize('P'))"

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  # Prepend Python to the PATH of this build
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
# check pip version
  - pip -V
# install usual requirements
  - pip install --upgrade -r tests/requirements-test.txt
  - pip install --upgrade -r requirements.txt
# check numpy & scipy versions
  - python -c "import numpy as np;print(np.version.version)"
  - python -c "import scipy as sp;print(sp.version.version)"
# check python and pip versions
  - python -V
  - pip -V

before_test:
# generate versioneer stuff
  - python %PYTHON%\\scripts\\versioneer install

test_script:
# make wheel package
  - pip install wheel
  - python setup.py bdist_wheel
# clean build directory
  - rd /s /q build
# remove source directory, to be sure that we use only wheel package for testing
  - rd /s /q pytrip
  - del setup.py
# install wheel package via pip, as we do not know the wheel filename in advance, we loop over all *.whl files in dist directory
  - ps: Get-ChildItem -Path dist\ -Recurse -Include *.whl | foreach-object { echo $_ | Out-Host ; pip install $_}
# run tests (normal py.test command results in memory error on appveyor, so we run tests file-by-file)
# exit in case of failure of a single test
# exclude problematic tests on 32bit platform (see https://github.com/pytrip/pytrip/issues/320)
  - ps: $exclude_tests = If ($env:platform -eq "x86") {"test_converters.py"} Else {""} ; Get-ChildItem -Path tests\ -Recurse -Include test*.py -Exclude $exclude_tests | foreach-object { $(echo $_ | Out-Host ; python -m pytest $_ | Out-Host; $?) -or $(break)}
# deploy package
  - bash appveyor\deploy_package.sh

# upload artifacts, disabling to save the space
#artifacts:
#  - path: dist\*whl