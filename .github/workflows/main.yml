# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python tests and packaging

on:
  push:
    branches: [ master ]
    tags: '*'
  pull_request:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
   run_tests:
     if: "github.repository == 'pytrip/pytrip' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"
 
     runs-on: ubuntu-latest
     strategy:
       matrix:
         python-version: [3.5, 3.6, 3.7, 3.8, 3.9]
     steps:
     - uses: actions/checkout@v2.3.4
     - name: Set up Python
       uses: actions/setup-python@v2
       with:
         python-version: ${{ matrix.python-version }}
     - name: Install dependencies
       run: |
         sudo apt-get update
         sudo apt-get -y install python-dev python3-dev
         python -m pip install --upgrade pip
         if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
         if [ -f tests/requirements-test.txt ]; then pip install -r tests/requirements-test.txt; fi
     - name: Lint with flake8
       run: |
         # stop the build if there are Python syntax errors or undefined names
         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
     - name: Test with tox
       run: |
          tox -e py

   make_and_upload_package_linux:
    name: Wheels on Linux
    if: "github.repository == 'pytrip/pytrip' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    runs-on: ubuntu-latest
    needs: [run_tests]
    steps:
    - uses: actions/checkout@v2
      with:
       fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
       python-version: '3.9'

    - name: Python wheels manylinux build
     # You may pin to the exact commit or the version.
     # uses: RalfG/python-wheels-manylinux-build@34161e0af9394fc7b5140da1ae8fc861540bba8d
      uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux1_x86_64
      with:
       # Python versions to target, space-separated
       python-versions: "cp35-cp35m cp36-cp36m cp37-cp37m cp38-cp38 cp39-cp39"

    - uses: actions/upload-artifact@v2
      with:
          path: ./dist/pytrip98*manylinux1_x86_64.whl
          if-no-files-found: error

   build_wheels_macOS:
    name: Wheels on macOS
    needs: [run_tests]
    runs-on: macos-10.15

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: install dependencies
        run: |
          pip install --upgrade setuptools pip wheel
          pip install cibuildwheel

      - name: show environment
        run: |
          pip freeze

      - name: list target wheels
        run: |
          python -m cibuildwheel . --print-build-identifiers

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD_VERBOSITY: "1"
          CIBW_BUILD: "cp36-* cp37-* cp38-* cp39-*"

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl
          if-no-files-found: error
   
   upload_wheels:
          name: Upload wheels
          needs: [make_and_upload_package_linux, build_wheels_macOS]
          runs-on: ubuntu-latest
          steps:          
          - uses: actions/download-artifact@v2
            with:
              name: artifact
              path: dist
          
          - name: Publish packages to pypi
            uses: pypa/gh-action-pypi-publish@v1.4.2
            if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags/v')
            with:
              # Password for your PyPI user or an access token
              password: ${{ secrets.TWINE_PASSWORD }}
              # The repository URL to use
              repository_url: "https://upload.pypi.org/legacy/"
              # The target directory for distribution
              packages_dir: dist/
              # Show verbose output.
              verbose: true
