# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
 push:
   branches: '**'
 pull_request:
   branches: [ master ]

jobs:
  build:
    if: "github.repository == 'pytrip/pytrip' && !contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')"

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f tests/requirements-test.txt ]; then pip install -r tests/requirements-test.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with tox
      run: |         
         tox
         
    - name: Python wheels manylinux build
      # You may pin to the exact commit or the version.
      # uses: RalfG/python-wheels-manylinux-build@34161e0af9394fc7b5140da1ae8fc861540bba8d
      uses: RalfG/python-wheels-manylinux-build@v0.3.3
      with:
        # Python versions to target, space-separated
        python-versions: "cp36-cp36m cp37-cp37m cp38-cp38"
        # pip packages required at build time, space-separated
        #build-requirements: # optional, default is 
        # yum packages to install, space-separated
        #system-packages: # optional, default is 
        # command to run before build, e.g. the execution of a script to perform additional build-environment setup
        #pre-build-command: # optional, default is 
        # path to python package to build, relative to repository root
        #package-path: # optional, default is 
        # extra arguments to pass to the `pip wheel` command, passed paths are relative to `package-path`
        #pip-wheel-args: # optional, default is -w ./dist --no-deps         
         
